Quickstart
==========

Setting up the database
-----------------------

In order to have persistence, we must first create the database. This is done by using the function :py:func:`~solar.database.create_tables`.

.. code-block:: python

    import solar.database as db
    db.create_tables()

This will create a database in the current directory.


Getting Events From HEK
-----------------------

Once the database has been setup we can begin to search the hek database for potential events. The interface for the HEK api is provided by the class :py:class:`~solar.service.hek.Hek_Service`.

.. code-block:: python

    import solar.service.hek as hserv
    
    hek = hserv.Hek_Service(
        event_starttime="2015-10-01T00:00:00",
        event_endtime="2015-11-15T00:00:00",
        event_type=["cj"],
    )

    # Submit the request
    hek.submit_request()

    found_events = hek.fetch_data()

    # Save the found events to the database
    hek.save_data()


Getting Fits Files from the Cutout Service
-------------------------------------------

There are several ways to generate a new :py:class:`~solar.service.cutout.Cutout_Service`. One may use an existing request or create one from attributes. A list of all api attributes may be found at `SSW API <https://www.lmsal.com/solarsoft//ssw_service/ssw_service_track_fov_api.html>`_.


.. code-block:: python

    from solar.database import Hek_Event, Cutout_Service
    from solar.service.attribute import Attribute

    # From fresh attributes
    cutout = Cutout_Service(Attribute("param1", val1), Attribute("param2", val2))

    # From kwargs
    cutout = Cutout_Service(param1 = val1, param2 = val2)

    # from an hek event
    event =  Hek_Event.get()
    cutout = Cutout_Service._from_event(event)

    # from an existing request
    old_cutout_request = Service_Request.select().where(
                Service_Request.service_type='ssw'
            ).get()
    cutout = Cutout_Service._from_model(old_cutout_request)


Requests are submitted in the same manner as the hek service. 

.. code-block:: python

    cutout.submit_request()
    cutout.save_request()


Data (fits files) is fetched in a similar manner as well, and is stored in the table :class:`~solar.database.tables.fits_file.Fits_File`.

.. code-block:: python

    cutout.fetch_data()
    cutout.save_data()
    cutout.save_request()


Generating Visuals
-------------------

Visuals can be generated by using the image factories found in the :mod:`solar.visual.img`. Videos can be generated using the factories in  :mod:`solar.visual.vid`.

There are two ways to generate visual. If persistence is not required, then the image can be generated using the factory itself.

.. code-block:: python

    import solar.visual.img as im

    image_builder = im.Basic_Image("png")
    f = Fits_File.get()
    image_builder.create(f.file_path)
    image_builder.save_visual(f,"savepath.png")


On the other hand, if one wishes to store the data in the database, the image factory can be passed to the function :func:`~solar.database.tables.visual_file.Visual_File.create_new_visual`. 



.. code-block:: python

    import solar.visual.img as im
    from solar.database.tables.visual_file import Visual_File
     
    image_builder = im.Basic_Image("png")
    f = Fits_File.get()
    db_image = Visual_File.create_new_visual(f,image_builder)



.. _export-to-zooniverse:

Exporting To Zooniverse
-----------------------

.. module:: solar.zooniverse.export
    :noindex:

Once we have a collection of images, we can export them. The function :func:`zooniverse_export` Takes a variable number of lists of lists of visual files and outputs them in a format readable by zooniverse.

The split function is used to break a list into manageable chunks, with overlap.

.. code-block:: python

    import solar.zooniverse.export as ex

    files_per_subject = 10
    subject_overlap = 2

    v = Visual_File.select().where() # Search is narrowed here

    ex.zooniverse_export(split(split(v,files_per_subjet, subject_overlap)))


Often, we will need to break things apart by subject. The following is a good template for doing such

.. code-block:: python

    files_per_subject = 10
    subject_overlap = 2

    to_export = [
        [
            y
            for y in Visual_File.select()
            .join(Join_Visual_Fits)
            .join(Fits_File)
            .join(Hek_Event)
            .where(Hek_Event.id == e)
            .order_by(Fits_File.image_time)
        ]
        for e in Hek_Event.select()
    ]

    # Get rid of an rogue empty sets
    to_export = [x for x in to_export if x]

    zooniverse_export(*[split(x, files_per_subject, subject_overlap) for x in to_export])


More information about such query statements can be found in the peewee documentation.


        
    

    
    




    


    

 
    
    





